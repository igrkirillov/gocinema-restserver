openapi: 3.0.0
info:
  title: Go Cinema Rest Api Spec
  description: >
    `Design First`, `Validated`
  version: project.version
servers:
  - url: "/"
tags:
  - name: Users
    description: Пользователи
  - name: Halls
    description: Кинозалы
  - name: MovieShows
    description: Киносеансы
  - name: Movies
    description: Фильмы
  - name: MovieShowPlace
    description: Место на кино-сеанс
  - name: Tickets
    description: Билеты
  - name: AppOptions
    description: Можно вкл/выкл продажи
paths:
  /users:
    get:
      summary: Получение всех пользователей
      operationId: getUsers
      tags:
        - Users
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Сохранение нового пользователя
      operationId: saveUser
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserParameters'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /halls:
    get:
      summary: Получение всех кинозалов
      operationId: getHalls
      tags:
        - Halls
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Hall'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Сохранение нового кинозала
      operationId: saveHall
      tags:
        - Halls
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HallParameters'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hall'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /halls/{id}:
    parameters:
      - $ref: '#/components/parameters/id'
    patch:
      summary: Обновление кинозала
      operationId: updateHall
      tags:
        - Halls
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HallParameters'
      responses:
        200:
          description: OK
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Удаление кинозала
      operationId: deleteHall
      tags:
        - Halls
      responses:
        200:
          description: OK
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /movie-shows:
    get:
      parameters:
        - $ref: '#/components/parameters/hallId'
      summary: Получение сеансов
      operationId: getMovieShows
      tags:
        - MovieShows
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MovieShow'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Сохранение нового сеанса
      operationId: saveMovieShow
      tags:
        - MovieShows
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MovieShowParameters'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieShow'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /movie-shows/{id}:
    parameters:
      - $ref: '#/components/parameters/id'
    patch:
      summary: Обновление параметров кино-сеанса
      operationId: updateMovieShow
      tags:
        - MovieShows
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MovieShowParameters'
      responses:
        200:
          description: OK
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Удаление кино-сеанса
      operationId: deleteMovieShow
      tags:
        - MovieShows
      responses:
        200:
          description: OK
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /movie-show-places:
    get:
      parameters:
        - $ref: "#/components/parameters/hallId"
        - $ref: "#/components/parameters/movieId"
      summary: Получение мест на киносеанс
      operationId: getMovieShowPlaces
      tags:
        - MovieShowPlaces
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MovieShowPlace'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /movie-show-places/{id}/book:
    parameters:
      - $ref: '#/components/parameters/id'
    put:
      summary: Бронирование места на кино-сеанс
      operationId: bookMovieShowPlace
      tags:
        - MovieShowPlaces
      responses:
        200:
          description: OK
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /movie-show-places/{id}/cancel-book:
    parameters:
      - $ref: '#/components/parameters/id'
    put:
      summary: Отмена бронирования места на кино-сеанс
      operationId: cancelBookMovieShowPlace
      tags:
        - MovieShowPlaces
      responses:
        200:
          description: OK
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /movies:
    get:
      summary: Получение всех фильмов
      operationId: getMovies
      tags:
        - Movies
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Movie'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Сохранение нового фильма
      operationId: saveMovie
      tags:
        - Movies
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MovieParameters'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /movies/{id}:
    parameters:
      - $ref: '#/components/parameters/id'
    patch:
      summary: Обновление параметров фильма
      operationId: updateMovie
      tags:
        - Movies
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MovieParameters'
      responses:
        200:
          description: OK
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /tickets:
    get:
      parameters:
        - $ref: "#/components/parameters/userId"
      summary: Получение всех билетов
      operationId: getTickets
      tags:
        - Tickets
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ticket'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Сохранение нового билета
      operationId: saveTicket
      tags:
        - Tickets
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketParameters'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /app-options/{option}:
    parameters:
      - $ref: '#/components/parameters/option'
    get:
      summary: Получить значение опции
      operationId: getAppOption
      tags:
        - AppOptions
      responses:
        200:
          description: OK
          content:
            text/plain:
              schema:
                type: string
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Сохранить значение опции
      operationId: saveAppOption
      tags:
        - AppOptions
      requestBody:
        content:
          text/plain:
            schema:
              type: string
      responses:
        200:
          description: OK
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  parameters:
    id:
      name: id
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/id'
    hallId:
      name: hallId
      description: id кино-зала
      in: query      
      schema:
        $ref: '#/components/schemas/id'
    movieId:
      name: movieId
      description: id фильма
      in: query
      schema:
        $ref: '#/components/schemas/id'
    userId:
      name: userId
      description: id пользователя
      in: query
      schema:
        $ref: '#/components/schemas/id'
    option:
      name: option
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/option'
  schemas:
    User:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        login:
          type: string
          description: Логин
          example: "laba"
        role:
          $ref: '#/components/schemas/Role'
      required:
        - login
        - password
        - role
    UserParameters:
      type: object
      properties:
        login:
          type: string
        password:
          type: string
        role:
          $ref: '#/components/schemas/Role'
      required:
        - login
        - password
        - role
    Hall:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        name:
          type: string
          description: Наименование
          example: "Вип-зал"
        cols:
          type: integer
          format: int32
          example: 5
          description: Кол-во мест по оси X
        rows:
          type: integer
          format: int32
          example: 5
          description: Кол-во мест по оси y
        places:
          type: array
          items:
            $ref: '#/components/schemas/HallPlace'
        standardPrice:
          $ref: '#/components/schemas/standardPrice'
        vipPrice:
          $ref: '#/components/schemas/vipPrice'
      required:
        - id
        - name
        - cols
        - rows
    HallParameters:
      type: object
      properties:
        name:
          type: string
          description: Наименование
          example: "Вип-зал"
        rows:
          type: integer
          format: int32
          example: 5
          description: Кол-во мест по оси X
        cols:
          type: integer
          format: int32
          example: 5
          description: Кол-во мест по оси Y
        places:
          type: array
          items:
            $ref: '#/components/schemas/HallPlaceParameters'
        standardPrice:
          $ref: '#/components/schemas/standardPrice'
        vipPrice:
          $ref: '#/components/schemas/vipPrice'
      required:
        - name
        - cols
        - rows
    HallPlaceParameters:
      type: object
      properties:
        row:
          type: integer
          format: int32
          description: Ряд (начинается с 0)
          example: 0
        col:
          type: integer
          format: int32
          description: Место (начинается с 0)
          example: 0
        isVip:
          type: boolean
          description: Признак, что место вип
          example: true
        isBlocked:
          type: boolean
          description: Признак, что место заблокировано
          example: true
    HallPlace:
      type: object
      properties:
        col:
          type: integer
          format: int32
          example: 10
        row:
          type: integer
          format: int32
          example: 1
        isVip:
          type: boolean
          example: true
        isBlocked:
          type: boolean
          example: true
      required:
        - hall
        - col
        - row
    Error:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 123456
        message:
          type: string
          description: Текст ошибки
          example: "Упс!"
    Role:
      type: string
      enum:
        - CLIENT
        - ADMIN
      example: "CLIENT"
    MovieShow:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        hall:
          $ref: "#/components/schemas/Hall"
        movie:
          $ref: "#/components/schemas/Movie"
        start:
          $ref: "#/components/schemas/start"
      required:
        - id
        - hall
        - movie
        - start
    MovieShowParameters:
      type: object
      properties:
        hallId:
          $ref: "#/components/schemas/id"
        movieId:
          $ref: "#/components/schemas/id"
        start:
          $ref: "#/components/schemas/start"
      required:
        - hallId
        - movieId
        - start
    Movie:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        name:
          type: string
          description: Название фильма
          example: "Географ глобус пропил"
        description:
          type: string
          description: Описание фильма
          example: "Про любовь в гл роди К Хабенский"
        country:
          type: string
          description: Название фильма
          example: "Географ глобус пропил"
        releaseDate:
          type: string
          description: Дата выхода
          example: "2020-01-01"
        duration:
          type: integer
          format: int32
          description: Длительность в минутах
          example: 120
      required:
        - id
        - name
    MovieParameters:
      type: object
      properties:
        name:
          type: string
          description: Название фильма
          example: "Географ глобус пропил"
        description:
          type: string
          description: Описание фильма
          example: "Про любовь в гл роди К Хабенский"
        country:
          type: string
          description: Страна
          example: "Россия"
        releaseDate:
          type: string
          description: Дата выхода
          example: "2020-01-01"
        duration:
          type: integer
          format: int32
          description: Длительность в минутах
          example: 120
    MovieShowPlace:
      type: object
      properties:
        movieShow:
          $ref: "#/components/schemas/MovieShow"
        hallPlace:
          $ref: "#/components/schemas/HallPlace"
        isBooked:
          type: boolean
          description: Место на сеанс забронировано?
    Ticket:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/id"
        user:
          $ref: "#/components/schemas/User"
        movieShowPlace:
          $ref: "#/components/schemas/MovieShowPlace"
        qrCode:
          type: string
          description: Кур-код билета
          example: "&&234324$7dfsmmvvvvvvr3"
    TicketParameters:
      type: object
      properties:
        movieShowPlaceId:
          $ref: "#/components/schemas/id"
    id:
      description: Идентификатор сущности
      type: integer
      format: int32
      example: 12345
    standardPrice:
      type: integer
      format: int32
      example: 300
      description: цена за обычное кресло в руб
    vipPrice:
      type: integer
      format: int32
      example: 600
      description: цена на vip кресло в руб
    start:
      type: string
      format: x-time
      description: Время начала
      example: "18:00"
    option:
      type: string
      enum:
        - IS_SALE_OPENED